dependencies {
    // BndPomRepository (3.5.0) cannot handle ranges without upper limit
    api 'org.jgrapes:org.jgrapes.http:[1.1.1,2)'
    api 'org.jgrapes:org.jgrapes.util:[1.1.1,2)'
    api 'org.jdrupes.json:json:[2.3.1,2.4.0)'
    api 'org.freemarker:freemarker:[2.3.27-incubating,2.4)'
}

ext.releaseVersion = "0.31.3"
ext.isSnapshot = false
version = releaseVersion + (isSnapshot ? "-SNAPSHOT" : "")

apply plugin: 'com.moowork.node'

task buildLib(type: NodeTask, dependsOn: ':npmInstall') {
    inputs.dir project.file('src')
    inputs.file project.file('tsconfig.json')
    inputs.file project.file('rollup.config.js')
    outputs.dir project.file('build/generated/resources')
    script = file("${rootProject.rootDir}/node_modules/rollup/dist/bin/rollup")
    args = ["-c"]
}

sourceSets {
    main {
        resources {
            srcDir project.file('build/generated/resources')
        }
    }
}

processResources.dependsOn 'buildLib'

eclipse {
    autoBuildTasks buildLib
}

ext.jsDocDestDir = "${rootProject.buildDir}/javadoc/org/jgrapes/webconsole/base/jsdoc"

task tsdoc(type: NodeTask, dependsOn: ':npmInstall') {
    inputs.dir project.file('src')
    inputs.file project.file('tsconfig.json')
    outputs.dir project.file(jsDocDestDir)
    script = file("${rootProject.rootDir}/node_modules/typedoc/bin/typedoc")
    args = []
}

configurations {
    markdownDoclet
}
 
dependencies {
    markdownDoclet "org.jdrupes.mdoclet:doclet:2.0.0"
}

configurations {
    javadocTaglets
}
 
dependencies {
    javadocTaglets "org.jdrupes.taglets:plantuml-taglet:2.0.0"
}

task java11doc(type: JavaExec) {
    enabled = JavaVersion.current().isJava11() && !isJitPackBuild
    
    dependsOn classes
    dependsOn 'tsdoc'
    inputs.file "${rootProject.rootDir}/overview.md"
    ext.destinationDir = file("${rootProject.buildDir}/javadoc")

    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED']
    classpath files(rootProject.subprojects.collect {project ->
        project.sourceSets.main.compileClasspath})    
    main = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', "JGrapes Web Console ${project.version}",
        '-overview', "${rootProject.rootDir}/overview.md",
        '-use',
        '-linksource',
        '-link', 'https://docs.oracle.com/en/java/javase/11/docs/api/',
        '-link', 'https://mnlipp.github.io/jgrapes/latest-release/javadoc/',
        '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '-docletpath', configurations.markdownDoclet.files.asType(List).join(":"),
        '-doclet', 'org.jdrupes.mdoclet.MDoclet',
        '-tagletpath', configurations.javadocTaglets.files.asType(List).join(":"),
        '-taglet', 'org.jdrupes.taglets.plantUml.PlantUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.StartUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.EndUml',
        '-d', destinationDir,
        '-bottom', file("${rootProject.rootDir}/misc/javadoc.bottom.txt").text,
        '--allow-script-in-comments',
        '-Xdoclint:-html',
        '-quiet'
        ]

    rootProject.subprojects.findAll({project ->
        project.name.startsWith("org.jgrapes.") && project.name != "org.jgrapes.webcon"}) \
        .collect {project -> project.sourceSets.main.allJava }.each {
            args it
        }

    ignoreExitValue true
    
}

task buildDoc(type: Task) {
    dependsOn 'java11doc'
}

task javadocJar(type: Jar) {
    dependsOn buildDoc
    from java11doc.destinationDir
    classifier "javadoc"
}
