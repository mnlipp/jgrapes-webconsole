apply plugin: 'eclipse'
    
eclipse {
    classpath {
        // 'org.eclipse.buildship.core.gradleclasspathcontainer',
        // containers 'aQute.bnd.classpath.container'
        downloadJavadoc = true
        downloadSources = true
        
        if (project.name != "WebConsoleDemo") {
//            file.whenMerged {
//                configurations.runtimeOnly.allDependencies.each { dep ->
//                    if (dep instanceof org.gradle.api.artifacts.ProjectDependency) {
//                        def depPrj = dep.dependencyProject
//                        def depPrjPath = "/" + rootProject.relativePath(depPrj.file("."))
//                        entries.removeAll { it.kind == 'src' && it.path == depPrjPath }
//                    }
//                }
//            }
            plusConfigurations -= [ configurations.runtimeClasspath,
                configurations.testRuntimeClasspath ]
        }
    }
    project {
        // buildCommand 'bndtools.core.bndbuilder'
        buildCommand 'org.eclipse.jdt.core.javabuilder'
        // buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
        // buildCommand 'bndtools.core.bndbuilder'
        buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
        buildCommand 'org.jdrupes.eclipse.minify.plugin.minifyBuilder'
        // 'bndtools.core.bndnature', 
        // 'org.eclipse.buildship.core.gradleprojectnature',
        natures 'org.eclipse.jdt.core.javanature', \
            'net.sf.eclipsecs.core.CheckstyleNature', \
            'org.jdrupes.eclipse.minify.plugin.minifyNature'
    }
    jdt {
        if (project.name.startsWith("org.jgrapes.")
            || project.name == 'WebConsoleDemo') {
            sourceCompatibility = 1.8
            targetCompatibility = 1.8
            javaRuntimeName = "JavaSE-1.8"
        }
        file {
            withProperties { properties ->
                def formatterPrefs = new Properties()
                rootProject.file("gradle/org.eclipse.jdt.core.formatter.prefs")
                    .withInputStream { formatterPrefs.load(it) }
                properties.putAll(formatterPrefs)
            }
        }
    }
}
tasks.eclipse.dependsOn(cleanEclipse)
