import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'org.jgrapes'

if (project.file("bnd.bnd").exists()) {

    apply plugin: 'java-library'
    apply plugin: 'biz.aQute.bnd.builder'

    // Defaults, overridden in subproject's build.gradle
    ext.releaseVersion = "0.0.0"
    ext.isSnapshot = true
    
    // Provide the Bundle-Version (derive from project version)
    ext.bundleVersion = """${ -> releaseVersion +
        (isSnapshot ? '.-\${tstamp}-SNAPSHOT' : '.ga') }"""

    task listSnapshots {
        doLast {
            if (isSnapshot) {
                println "Snapshot: " + project.name
            }
        }
    }
    
    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    jar {
        manifest {
            attributes('Bundle-Version': bundleVersion)
        }
    }
}

if (project.name.startsWith('org.jgrapes.') 
    || project.name == 'WebConsoleDemo') {

    jar {
        duplicatesStrategy = 'exclude'
    
        doFirst {
            manifest {
                attributes(
                    'Git-Descriptor': inputs.properties['gitDescriptor']
                )
            }
        }
        
        manifest {
            inputs.property("gitDescriptor", { grgit.describe(always: true) })
               
            // Set Git revision information in the manifests of built bundles
            attributes([
                "Git-Descriptor": grgit.describe(always: true),
                "Git-SHA": grgit.head().id
            ])
        }
    }
    
    dependencies {
        compileOnly 'org.osgi:org.osgi.annotation:6.0.0'
        testImplementation 'junit:junit:4.12', 'net.jodah:concurrentunit:0.4.2'
    }
    
    apply from: "${project.rootDir}/gradle/layout.gradle"
    
    test {
    //    if (!rootProject.isCiBuild) {
    //        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=18888'
    //    }
    
        testLogging {
            events TestLogEvent.FAILED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.PASSED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
    
            exceptionFormat TestExceptionFormat.FULL
    
            showStandardStreams = true
            showExceptions = true
            showStackTraces = true
            showCauses = true
        }
            
        if (isCiBuild) {
            maxParallelForks = 2
            maxHeapSize = '768m'
        }
    }
        
    apply from: "${project.rootDir}/gradle/eclipse.gradle"
}

if (project.name.startsWith("org.jgrapes.")) {
    apply from: "${project.rootDir}/gradle/javadoc.gradle"
    apply from: "${project.rootDir}/gradle/publishing.gradle"
    apply from: "${project.rootDir}/gradle/baseline.gradle"
}


